@use "sass:math";

$grid-columns: 12;
$grid-gaps: (
	'0': 0,
	'1': 10px,
	'2': 20px,
	'3': 30px,
);
$layout-values: flex-start, flex-end, center, space-between, space-around;

// base layout classes
// .container {
// 	width: 100%;
// 	max-width: 1200px;
// 	margin: 0 auto;
// 	padding: 0 20px;
// 	box-sizing: border-box;
// }

/* Materialize CSS container styles */
.container {
	width: 90%;
	max-width: 1280px;
	margin: 0 auto;
	box-sizing: border-box;
}

@media (min-width: 601px) {
	.container {
		width: 85%;
	}
}

@media (min-width: 993px) {
	.container {
		width: 70%;
	}
}

.row {
	display: flex;
	flex-wrap: wrap;
}

// grid gaps
@each $key, $val in $grid-gaps {
	// '>' Child combinator selector. Selects children of the parent. '> *' selects all children of the parent
	.gap-#{$key} > * {
		padding: $val;
	}
	.gap-#{$key} {
		margin-left: -$val;
		margin-right: -$val;
	}
}

// justify content classes
@each $val in $layout-values {
	.justify-#{$val} {
		justify-content: $val;
	}
}

// column classes
@include xs {
	// loop through index 1 to 12
	@for $i from 1 through $grid-columns {
		.col-#{$i}-xs {
			box-sizing: border-box;
			flex-grow: 0;
			// (1 * 100) / 12 = 8.33%
			width: math.div($i * 100%, $grid-columns);
		}
	}
}
@include sm {
	@for $i from 1 through $grid-columns {
		.col-#{$i}-sm {
			box-sizing: border-box;
			flex-grow: 0;
			width: math.div($i * 100%, $grid-columns);
		}
	}

	// output:
	// @media (min-width: 480px )) {
	// 	.col-1-sm {
	//     box-sizing: border-box;
	// 		flex-grow: 0;
	// 		width: 8.3333%;
	//   }
	// }
}

@include md {
	@for $i from 1 through $grid-columns {
		.col-#{$i}-md {
			box-sizing: border-box;
			flex-grow: 0;
			width: math.div($i * 100%, $grid-columns);
		}
	}
}
@include lg {
	@for $i from 1 through $grid-columns {
		.col-#{$i}-lg {
			box-sizing: border-box;
			flex-grow: 0;
			width: math.div($i * 100%, $grid-columns);
		}
	}
}
@include xl {
	@for $i from 1 through $grid-columns {
		.col-#{$i}-xl {
			box-sizing: border-box;
			flex-grow: 0;
			width: math.div($i * 100%, $grid-columns);
		}
	}
}
