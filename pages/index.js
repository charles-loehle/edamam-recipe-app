import { useEffect, useState } from 'react';
import Head from 'next/head';
import Favorites from '../components/Favorites';
import Image from 'next/image';
import Link from 'next/link';
import { faSearch } from '@fortawesome/free-solid-svg-icons';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import ReCAPTCHA from 'react-google-recaptcha';

const appID = process.env.NEXT_PUBLIC_APP_ID;
const appKey = process.env.NEXT_PUBLIC_APP_KEY;
const recaptchaSiteKey = process.env.NEXT_PUBLIC_RECAPTCHA_SITE_KEY;
// console.log(process.env.NEXT_PUBLIC_RECAPTCHA_SITE_KEY);

const defaultEndpoint = `https://api.edamam.com/api/recipes/v2?type=public&q=chicken&app_id=${appID}&app_key=${appKey}`;

export async function getServerSideProps() {
	const res = await fetch(defaultEndpoint);
	const data = await res.json();
	// Limit to 8 recipes
	data.hits = data.hits.slice(0, 8);
	return {
		props: {
			data,
		},
	};
}

export default function Home({ data }) {
	// console.log(data);
	const { _links, hits: defaultHits = [] } = data;

	/* =================== PAGINATION */
	// use prev since we dont have a prev property. if prev is 0 then run updatePrev() to replace the defaultHits with nextData.hits
	const [prev, updatePrev] = useState(false);
	const [hits, updateHits] = useState(defaultHits);
	const [page, updatePage] = useState({
		// put current url and pagination info together. same as data why?
		..._links,
		current: defaultEndpoint, // on page load, defaultEndpoint
	});
	const [favorites, setFavorites] = useState([]);
	const [captcha, setCaptcha] = useState('');

	const { current, next } = page;
	//console.log(next); // same url as current but the app_key is hashed

	useEffect(() => {
		if (current === defaultEndpoint) return;

		async function request() {
			const res = await fetch(current);
			const nextData = await res.json();
			// Limit to 8 recipes
			nextData.hits = nextData.hits.slice(0, 8);

			updatePage({
				current,
				...nextData._links, // get pagination _links object
			});

			// if we havent clicked the load more button, populate the page
			if (prev) {
				// if previous page doesn't exist, update the whole page with the results array
				updateHits(nextData.hits);
				return;
			}

			// if we clicked the load more button, update the hits array by concatinating the next page api call results with the current page api call results
			updateHits(current => {
				return [...current, ...nextData.hits];
			});
		}

		request();
	}, [current]);

	useEffect(() => {
		getLocalFavs();
	}, []);

	useEffect(() => {
		saveLocalFavs();
	}, [favorites]);

	function handleLoadMore() {
		updatePrev(false);
		/* TODO: FIND A WAY TO GET LINK TO PREVIOUS PAGE AND STORE IT IN STATE 'preve' */
		updatePage(prev => {
			return {
				...prev,
				// The optional chaining operator (?.) enables you to read the value of a property located deep within a chain of connected objects without having to check that each reference in the chain is valid.
				current: page?.next.href,
			};
		});
	}

	function handleOnSubmitSearch(e) {
		e.preventDefault();
		// alert('handleOnSubmitSearch');
		try {
			// recaptcha
			console.log(captcha);
			if (captcha) {
				console.log('ReCAPTCHA verified!');

				updatePrev(true);
				const { currentTarget = {} } = e;
				// The optional chaining operator (?.)
				const fields = Array.from(currentTarget?.elements);
				const fieldQuery = fields.find(field => field.name === 'query');
				const value = fieldQuery.value || '';
				const endpoint = `https://api.edamam.com/api/recipes/v2?type=public&q=${value}&app_id=14c68664&app_key=cc33a02c16fadb22aea4ecea7184fee1
		  `;
				// console.log(endpoint);
				updatePage({ current: endpoint });
				grecaptcha.reset();
			}
		} catch (error) {
			console.error(error.message);
		}
	}

	function saveLocalFavs(recipeId) {
		localStorage.setItem('favorites', JSON.stringify(favorites));
	}

	function getLocalFavs() {
		// console.log('test');
		if (localStorage.getItem('favorites') === null) {
			localStorage.setItem('favorites', JSON.stringify([]));
		} else {
			let favsLocal = JSON.parse(localStorage.getItem('favorites'));
			setFavorites(favsLocal);
		}
	}

	function handleAddToFavs(recipeId, image, label) {
		// console.log(favorites.find(item => item.recipeId === recipeId));
		// check if favorite already exists
		if (favorites.find(item => item.recipeId === recipeId)) {
			return;
		}
		// if not, save to favorites and localStorage
		setFavorites([...favorites, { recipeId, image, label }]);
		saveLocalFavs(favorites);
	}

	return (
		<>
			<Head>
				<title>DASH Diet Recipe App</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
				<link
					rel="stylesheet"
					href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.14.0/css/all.min.css"
				/>
			</Head>
			<nav className="navbar">
				<div className="container">
					{/* <h1 className="site-title">DASH Diet Recipe App</h1> */}
					<Image
						src="/recipe-app-logo.png"
						alt="logo"
						width={160}
						height={22}
					/>
					<form className="form display-f" onSubmit={handleOnSubmitSearch}>
						<div className="form-control">
							<input className="bg-light-gray" type="search" name="query" />
							<ReCAPTCHA sitekey={recaptchaSiteKey} onChange={setCaptcha} />
						</div>

						<button className="btn-white text-gray">
							{' '}
							<FontAwesomeIcon icon={faSearch} />
						</button>
					</form>
				</div>
			</nav>
			<main className="container mt-3">
				<div className="sub-header">
					<Favorites favorites={favorites} setFavorites={setFavorites} />
					{/* <h2>Recipe Results</h2> */}
				</div>
				<div className="row gap-2">
					{hits.map((result, index) => {
						const { image, label } = result.recipe;
						// get recipe id from recipe.uri
						const recipeUri = result.recipe.uri; // typeof: string
						// console.log(recipeUri);
						const searchTerm = '#';
						const indexOfHash = recipeUri.indexOf(searchTerm);
						const recipeId = recipeUri.slice(indexOfHash + 1); // get recipe id without the hash
						// console.log(recipeId);
						return (
							<div key={index} className="col-12-xs col-6-md col-3-lg">
								<div className="card">
									<Link href="/recipe/[id]" as={`/recipe/${recipeId}`}>
										<Image
											src={image}
											alt="recipe thumbnail"
											width={400}
											height={400}
										/>
										{/* <img src={image} alt="recipe image" /> */}

										<div className="recipe-thumbnail"></div>
									</Link>
									<div className="action-container">
										<h3 className="card-title m-1">{label}</h3>
										<button
											className="fav-btn"
											onClick={() => handleAddToFavs(recipeId, image, label)}
										>
											<i
												className={`fas fa-heart ${
													favorites.find(item => item.recipeId === recipeId)
														? 'faved'
														: ''
												}`}
											></i>
										</button>
									</div>
								</div>
							</div>
						);
					})}
				</div>

				<div className="display-f justify-content-c">
					<button className="btn-primary text-white" onClick={handleLoadMore}>
						Load More
					</button>
				</div>
			</main>

			<footer className="footer text-center mt-4 bg-light-gray">
				<a
					href="https://clwebdevelopment.com"
					target="_blank"
					rel="noopener noreferrer"
				>
					Copyright Â© 2021 CLWebDevelopment
				</a>
			</footer>
		</>
	);
}

