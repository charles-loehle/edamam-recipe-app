import { useEffect, useState } from 'react';
import Head from 'next/head';
import Image from 'next/image';
import Link from 'next/link';
import { faSearch } from '@fortawesome/free-solid-svg-icons';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';

const defaultEndpoint =
	'https://api.edamam.com/api/recipes/v2?type=public&q=chicken&app_id=14c68664&app_key=cc33a02c16fadb22aea4ecea7184fee1';

export async function getServerSideProps() {
	const res = await fetch(defaultEndpoint);
	const data = await res.json();
	return {
		props: {
			data,
		},
	};
}

export default function Home({ data }) {
	console.log(data);
	const { _links, hits: defaultHits = [] } = data;

	/* =================== PAGINATION */
	// use prev since we dont have a prev property. if prev is 0 then run updatePrev() to replace the defaultHits with nextData.hits
	const [prev, updatePrev] = useState(false);
	const [hits, updateHits] = useState(defaultHits);
	const [page, updatePage] = useState({
		// put current url and pagination info together. same as data why?
		..._links,
		current: defaultEndpoint, // on page load, defaultEndpoint
	});
	console.log(page);
	const { current, next } = page;
	console.log(current); // https://api.edamam.com/api/recipes/v2?type=public&q=chicken&app_id=14c68664&app_key=cc33a02c16fadb22aea4ecea7184fee1
	console.log(next); // same url as current but the app_key is hashed

	useEffect(() => {
		if (current === defaultEndpoint) return;

		async function request() {
			const res = await fetch(current);
			const nextData = await res.json();

			updatePage({
				current,
				...nextData._links, // get pagination _links object
			});

			// if we havent clicked the load more button, populate the page
			if (prev) {
				// if previous page doesn't exist, update the whole page with the results array
				updateHits(nextData.hits);
				return;
			}

			// if we clicked the load more button, combine previous results with new results.
			/* TODO: FIND A WAY TO GET LINK TO PREVIOUS PAGE AND STORE IT IN STATE 'preve' */
			updateHits(current => {
				return [...current, ...nextData.hits];
			});
		}

		request();
	}, [current]);

	function handleLoadMore() {
		updatePrev(false);
		/* TODO: FIND A WAY TO GET LINK TO PREVIOUS PAGE AND STORE IT IN STATE 'preve' */
		updatePage(prev => {
			return {
				...prev,
				// The optional chaining operator (?.) enables you to read the value of a property located deep within a chain of connected objects without having to check that each reference in the chain is valid.
				current: page?.next.href,
			};
		});
	}

	function handleOnSubmitSearch(e) {
		e.preventDefault();
		// alert('handleOnSubmitSearch');
		updatePrev(true);
		const { currentTarget = {} } = e;
		// The optional chaining operator (?.)
		const fields = Array.from(currentTarget?.elements);
		const fieldQuery = fields.find(field => field.name === 'query');
		const value = fieldQuery.value || '';
		const endpoint = `https://api.edamam.com/api/recipes/v2?type=public&q=${value}&app_id=14c68664&app_key=cc33a02c16fadb22aea4ecea7184fee1
		  `;
		// console.log(endpoint);
		updatePage({ current: endpoint });
	}

	return (
		<>
			<Head>
				<title>DASH Diet Recipe App</title>
				<meta name="description" content="Generated by create next app" />
				<link rel="icon" href="/favicon.ico" />
			</Head>
			<nav className="navbar">
				<div className="container">
					{/* <h1 className="site-title">DASH Diet Recipe App</h1> */}
					<Image
						src="/recipe-app-logo.png"
						alt="logo"
						width={160}
						height={22}
					/>
					<form className="form display-f" onSubmit={handleOnSubmitSearch}>
						<div className="form-control">
							<input className="bg-light-gray" type="search" name="query" />
						</div>

						<button className="btn-white text-gray">
							{' '}
							<FontAwesomeIcon icon={faSearch} />
						</button>
					</form>
				</div>
			</nav>
			<main className="container mt-3">
				<div className="row gap-2">
					{hits.map((result, index) => {
						const { image, label } = result.recipe;
						// get recipe id from recipe.uri
						const recipeUri = result.recipe.uri; // typeof: string
						// console.log(recipeUri);
						const searchTerm = '#';
						const indexOfHash = recipeUri.indexOf(searchTerm);
						const recipeId = recipeUri.slice(indexOfHash + 1); // get recipe id without the hash
						// console.log(recipeId);
						return (
							<div key={index} className="col-12-xs col-6-md col-3-lg">
								<div className="card">
									<Link href="/recipe/[id]" as={`/recipe/${recipeId}`}>
										<a>
											<Image
												src={image}
												alt="recipe thumbnail"
												width={400}
												height={400}
											/>
											{/* <img src={image} alt="recipe image" /> */}
											<h3 className="card-title m-1">{label}</h3>
											<div className="recipe-thumbnail"></div>
										</a>
									</Link>
								</div>
							</div>
						);
					})}
				</div>

				<div className="display-f justify-content-c">
					<button className="btn-secondary text-white" onClick={handleLoadMore}>
						Load More
					</button>
				</div>
			</main>

			<footer className="footer">
				<a
					href="https://vercel.com?utm_source=create-next-app&utm_medium=default-template&utm_campaign=create-next-app"
					target="_blank"
					rel="noopener noreferrer"
				>
					Powered by{' '}
					<span className="logo">
						<Image src="/vercel.svg" alt="Vercel Logo" width={72} height={16} />
					</span>
				</a>
			</footer>
		</>
	);
}
